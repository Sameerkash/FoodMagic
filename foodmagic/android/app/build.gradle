def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.foodmagic"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.multidex:multidex:2.0.1"
}

sceneform.asset('sampledata/AlooTikki.fbx',
        'default',
        'sampledata/AlooTikki.sfa',
        'src/main/assets/AlooTikki')

sceneform.asset('sampledata/ClassicNV.fbx',
        'default',
        'sampledata/ClassicNV.sfa',
        'src/main/assets/ClassicNV')

sceneform.asset('sampledata/ClassicV.fbx',
        'default',
        'sampledata/ClassicV.sfa',
        'src/main/assets/ClassicV')

sceneform.asset('sampledata/DoublePatty.fbx',
        'default',
        'sampledata/DoublePatty.sfa',
        'src/main/assets/DoublePatty')

sceneform.asset('sampledata/Farmhouse.fbx',
        'default',
        'sampledata/Farmhouse.sfa',
        'src/main/assets/Farmhouse')

sceneform.asset('sampledata/IndieCT.fbx',
        'default',
        'sampledata/IndieCT.sfa',
        'src/main/assets/IndieCT')

sceneform.asset('sampledata/MushroomF.fbx',
        'default',
        'sampledata/MushroomF.sfa',
        'src/main/assets/MushroomF')

sceneform.asset('sampledata/PaneerBurger.fbx',
        'default',
        'sampledata/PaneerBurger.sfa',
        'src/main/assets/PaneerBurger')

sceneform.asset('sampledata/Pepperoni.fbx',
        'default',
        'sampledata/Pepperoni.sfa',
        'src/main/assets/Pepperoni')

sceneform.asset('sampledata/VeggieParadise.fbx',
        'default',
        'sampledata/VeggieParadise.sfa',
        'src/main/assets/VeggieParadise')